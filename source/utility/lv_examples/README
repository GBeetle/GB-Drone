/*
 * This file is part of GB-Drone project (https://github.com/GBeetle/GB-Drone).
 * Copyright (c) 2022 GBeetle.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

 #include <stdio.h>
 #include "esp_timer.h"
 #include "log_sys.h"
 #include "tft_sprite.h"
 #include "file_system.h"
 #include "disp_driver.h"
 #include "lvgl.h"
 #include "lvgl_driver.h"

 #if defined CONFIG_LV_USE_DEMO_WIDGETS
     #include "lv_examples/src/lv_demo_widgets/lv_demo_widgets.h"
 #elif defined CONFIG_LV_USE_DEMO_KEYPAD_AND_ENCODER
     #include "lv_examples/src/lv_demo_keypad_encoder/lv_demo_keypad_encoder.h"
 #elif defined CONFIG_LV_USE_DEMO_BENCHMARK
     #include "lv_examples/src/lv_demo_benchmark/lv_demo_benchmark.h"
 #elif defined CONFIG_LV_USE_DEMO_STRESS
     #include "lv_examples/src/lv_demo_stress/lv_demo_stress.h"
 #else
     #error "No demo application selected."
 #endif

 #define LV_TICK_PERIOD_MS 1

 /**********************
  *  STATIC PROTOTYPES
  **********************/
 static void lv_tick_task(void *arg);
 static void guiTask(void *pvParameter);
 static void create_demo_application(void);

 //Main application
 void app_main(void)
 {
     GB_LogSystemInit();

     /* If you want to use a task to create the graphic, you NEED to create a Pinned task
      * Otherwise there can be problem such as memory corruption and so on.
      * NOTE: When not using Wi-Fi nor Bluetooth you can pin the guiTask to core 0 */
     xTaskCreatePinnedToCore(guiTask, "gui", 4096 * 2, NULL, 0, NULL, 1);
 }

 /* Creates a semaphore to handle concurrent call to lvgl stuff
  * If you wish to call *any* lvgl function from other threads/tasks
  * you should lock on the very same semaphore! */
 SemaphoreHandle_t xGuiSemaphore;

 static void guiTask(void *pvParameter)
 {
     (void) pvParameter;
     xGuiSemaphore = xSemaphoreCreateMutex();

     lv_init();

     /* Initialize SPI or I2C bus used by the drivers */
     disp_driver_init();

     lv_color_t* buf1 = heap_caps_malloc(DISP_BUF_SIZE * sizeof(lv_color_t), MALLOC_CAP_DMA);
     assert(buf1 != NULL);

     /* Use double buffered when not working with monochrome displays */
     lv_color_t* buf2 = heap_caps_malloc(DISP_BUF_SIZE * sizeof(lv_color_t), MALLOC_CAP_DMA);
     assert(buf2 != NULL);

     static lv_disp_buf_t disp_buf;

     uint32_t size_in_px = DISP_BUF_SIZE;

     /* Initialize the working buffer depending on the selected display.
      * NOTE: buf2 == NULL when using monochrome displays. */
     lv_disp_buf_init(&disp_buf, buf1, buf2, size_in_px);

     lv_disp_drv_t disp_drv;
     lv_disp_drv_init(&disp_drv);
     disp_drv.flush_cb = lvgl_driver_flush;

     GB_DEBUGI(DISP_TAG, "lv_disp_drv_init hor_res: %d, ver_res: %d", disp_drv.hor_res, disp_drv.ver_res);

 #if defined CONFIG_DISPLAY_ORIENTATION_PORTRAIT || defined CONFIG_DISPLAY_ORIENTATION_PORTRAIT_INVERTED
     disp_drv.rotated = 1;
 #endif

     disp_drv.buffer = &disp_buf;
     lv_disp_drv_register(&disp_drv);

     /* Register an input device when enabled on the menuconfig */
 #if CONFIG_LV_TOUCH_CONTROLLER != TOUCH_CONTROLLER_NONE
     lv_indev_drv_t indev_drv;
     lv_indev_drv_init(&indev_drv);
     indev_drv.read_cb = touch_driver_read;
     indev_drv.type = LV_INDEV_TYPE_POINTER;
     lv_indev_drv_register(&indev_drv);
 #endif

     /* Create and start a periodic timer interrupt to call lv_tick_inc */
     const esp_timer_create_args_t periodic_timer_args = {
         .callback = &lv_tick_task,
         .name = "periodic_gui"
     };
     esp_timer_handle_t periodic_timer;
     ESP_ERROR_CHECK(esp_timer_create(&periodic_timer_args, &periodic_timer));
     ESP_ERROR_CHECK(esp_timer_start_periodic(periodic_timer, LV_TICK_PERIOD_MS * 1000));

     /* Create the demo application */
     create_demo_application();

     while (1) {
         /* Delay 1 tick (assumes FreeRTOS tick is 10ms */
         vTaskDelay(pdMS_TO_TICKS(10));

         /* Try to take the semaphore, call lvgl related function on success */
         if (pdTRUE == xSemaphoreTake(xGuiSemaphore, portMAX_DELAY)) {
             lv_task_handler();
             xSemaphoreGive(xGuiSemaphore);
        }
     }

     /* A task should NEVER return */
     free(buf1);
     free(buf2);
     vTaskDelete(NULL);
 }

 static void create_demo_application(void)
 {
 #if defined CONFIG_LV_USE_DEMO_WIDGETS
     lv_demo_widgets();
 #elif defined CONFIG_LV_USE_DEMO_KEYPAD_AND_ENCODER
     lv_demo_keypad_encoder();
 #elif defined CONFIG_LV_USE_DEMO_BENCHMARK
     lv_demo_benchmark();
 #elif defined CONFIG_LV_USE_DEMO_STRESS
     lv_demo_stress();
 #else
     #error "No demo application selected."
 #endif
 }

 static void lv_tick_task(void *arg) {
     (void) arg;

     lv_tick_inc(LV_TICK_PERIOD_MS);
 }
