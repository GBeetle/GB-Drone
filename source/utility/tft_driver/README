/*
 * This file is part of GB-Drone project (https://github.com/GBeetle/GB-Drone).
 * Copyright (c) 2022 GBeetle.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdio.h>
#include "log_sys.h"
#include "tft_sprite.h"
#include "file_system.h"
#include "disp_driver.h"

#define BITS_PER_PIXEL 1              // How many bits per pixel in Sprite

struct TFT_eSPI tft;
struct TFT_eSprite sprite;

// =========================================================================
// Create sprite, plot graphics in it, plot to screen, then delete sprite
// =========================================================================
void drawStar(int x, int y, int star_color)
{
    // 1 bpp colour values can only be 1 or 0 (one or zero)
    uint16_t transparent = 0; // The transparent colour, can only be 1 or 0

    // Create an 1 bit (2 colour) sprite 70x80 pixels (uses 70*80/8 = 700 bytes of RAM)
    // Colour depths of 8 bits per pixel and 16 bits are also supported.
    sprite.setColorDepth(&sprite, BITS_PER_PIXEL);         // Set colour depth first
    sprite.createSprite(&sprite, 70, 80, 1);               // then create the sprite

    // Fill Sprite with the colour that will be defined later as "transparent"
    // We could also fill with any colour as transparent, and later specify that
    // same colour when we push the Sprite onto the display screen.
    sprite.fillSprite(&sprite, transparent);

    // Draw 2 triangles to create a filled in star
    sprite._tft->fillTriangle(sprite._tft, 35, 0, 0, 59, 69, 59, star_color);
    sprite._tft->fillTriangle(sprite._tft, 35, 79, 0, 20, 69, 20, star_color);

    // Punch a star shaped hole in the middle with a smaller "transparent" star
    sprite._tft->fillTriangle(sprite._tft, 35, 7, 6, 56, 63, 56, transparent);
    sprite._tft->fillTriangle(sprite._tft, 35, 73, 6, 24, 63, 24, transparent);

    // Set the 2 pixel colours that 1 and 0 represent on the display screen
    sprite.setBitmapColor(&sprite, star_color, transparent);

    // Push sprite to TFT screen CGRAM at coordinate x,y (top left corner)
    // Specify what colour is to be treated as transparent (black in this example)
    sprite.pushSpriteTrans(&sprite, x, y, transparent);

    // Delete Sprite to free memory, creating and deleting takes very little time.
    sprite.deleteSprite(&sprite);
}

void draw_loop()
{
    int i = 0;
    uint16_t color[24] = {
        TFT_BLACK, TFT_NAVY, TFT_DARKGREEN, TFT_DARKCYAN,
        TFT_MAROON, TFT_PURPLE, TFT_OLIVE, TFT_LIGHTGREY,
        TFT_DARKGREY, TFT_BLUE, TFT_GREEN, TFT_CYAN,
        TFT_RED, TFT_MAGENTA, TFT_YELLOW, TFT_WHITE,
        TFT_ORANGE, TFT_GREENYELLOW, TFT_PINK, TFT_BROWN,
        TFT_GOLD, TFT_SILVER, TFT_SKYBLUE, TFT_VIOLET};

    tft.fillScreen(&tft, TFT_NAVY);

    while (1)
    {
        tft.fillScreen(&tft, color[i++]);
        i %= 24;

        drawStar(100, 100, 100);
        vTaskDelay(2000 / portTICK_PERIOD_MS);
    }
}

void app_main(void)
{
    GB_LogSystemInit();

    disp_driver_init();
    TFT_eSpi_init(&tft, LV_HOR_RES_MAX, LV_VER_RES_MAX, 0);
    TFT_eSprite_init(&sprite, &tft);

    xTaskCreate(draw_loop, "draw_loop", 5120, NULL, 4 | portPRIVILEGE_BIT, NULL);
}

#if 0 // show flash pictures
void draw_loop()
{
    uint32_t buffer_size = LV_HOR_RES_MAX * LV_VER_RES_MAX * 2;
    uint16_t *buffer = (uint16_t *)heap_caps_malloc(buffer_size, MALLOC_CAP_DMA);

    for (int i = 0; i < 60; i++) {
        char filename[20];
        sprintf(filename, "O_%d.RAW", i);

        GB_FileSystem_Read(filename, (uint8_t*)buffer, buffer_size);
        tft.pushImage(&tft, 0, 0, LV_HOR_RES_MAX, LV_VER_RES_MAX, buffer);

        vTaskDelay(50 / portTICK_PERIOD_MS);

        GB_DEBUGI(DISP_TAG, "Display %s", filename);
    }
}
#endif